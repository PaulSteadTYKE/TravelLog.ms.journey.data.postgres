/*
 * This file is generated by jOOQ.
 */
package uk.co.tyke.travellog.journey.db.postgres.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.tyke.travellog.journey.db.postgres.jooq.Keys;
import uk.co.tyke.travellog.journey.db.postgres.jooq.TravellogJourneyDevSchema;
import uk.co.tyke.travellog.journey.db.postgres.jooq.tables.records.TripRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trip extends TableImpl<TripRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>travellog_journey_dev_schema.trip</code>
     */
    public static final Trip TRIP = new Trip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TripRecord> getRecordType() {
        return TripRecord.class;
    }

    /**
     * The column <code>travellog_journey_dev_schema.trip.trip_id</code>.
     */
    public final TableField<TripRecord, Long> TRIP_ID = createField(DSL.name("trip_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>travellog_journey_dev_schema.trip.journey_id</code>.
     */
    public final TableField<TripRecord, Long> JOURNEY_ID = createField(DSL.name("journey_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>travellog_journey_dev_schema.trip.created</code>.
     */
    public final TableField<TripRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Trip(Name alias, Table<TripRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trip(Name alias, Table<TripRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>travellog_journey_dev_schema.trip</code> table
     * reference
     */
    public Trip(String alias) {
        this(DSL.name(alias), TRIP);
    }

    /**
     * Create an aliased <code>travellog_journey_dev_schema.trip</code> table
     * reference
     */
    public Trip(Name alias) {
        this(alias, TRIP);
    }

    /**
     * Create a <code>travellog_journey_dev_schema.trip</code> table reference
     */
    public Trip() {
        this(DSL.name("trip"), null);
    }

    public <O extends Record> Trip(Table<O> child, ForeignKey<O, TripRecord> key) {
        super(child, key, TRIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TravellogJourneyDevSchema.TRAVELLOG_JOURNEY_DEV_SCHEMA;
    }

    @Override
    public Identity<TripRecord, Long> getIdentity() {
        return (Identity<TripRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TripRecord> getPrimaryKey() {
        return Keys.TRIP_PKEY;
    }

    @Override
    public List<ForeignKey<TripRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRIP__TRIP_JOURNEY_ID_FKEY);
    }

    private transient Journey _journey;

    /**
     * Get the implicit join path to the
     * <code>travellog_journey_dev_schema.journey</code> table.
     */
    public Journey journey() {
        if (_journey == null)
            _journey = new Journey(this, Keys.TRIP__TRIP_JOURNEY_ID_FKEY);

        return _journey;
    }

    @Override
    public Trip as(String alias) {
        return new Trip(DSL.name(alias), this);
    }

    @Override
    public Trip as(Name alias) {
        return new Trip(alias, this);
    }

    @Override
    public Trip as(Table<?> alias) {
        return new Trip(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(String name) {
        return new Trip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(Name name) {
        return new Trip(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(Table<?> name) {
        return new Trip(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
