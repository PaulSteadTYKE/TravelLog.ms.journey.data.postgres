/*
 * This file is generated by jOOQ.
 */
package uk.co.tyke.travellog.journey.data.postgres.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.Journey;
import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.Leg;
import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.Location;
import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.records.JourneyRecord;
import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.records.LegRecord;
import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.records.LocationRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * travellog_journey_dev_schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JourneyRecord> JOURNEY_PKEY = Internal.createUniqueKey(Journey.JOURNEY, DSL.name("journey_pkey"), new TableField[] { Journey.JOURNEY.JOURNEY_ID }, true);
    public static final UniqueKey<LegRecord> LEG_PKEY = Internal.createUniqueKey(Leg.LEG, DSL.name("leg_pkey"), new TableField[] { Leg.LEG.LEG_ID }, true);
    public static final UniqueKey<LocationRecord> LOCATION_PKEY = Internal.createUniqueKey(Location.LOCATION, DSL.name("location_pkey"), new TableField[] { Location.LOCATION.LOCATION_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<LegRecord, JourneyRecord> LEG__LEG_JOURNEY_ID_FKEY = Internal.createForeignKey(Leg.LEG, DSL.name("leg_journey_id_fkey"), new TableField[] { Leg.LEG.JOURNEY_ID }, Keys.JOURNEY_PKEY, new TableField[] { Journey.JOURNEY.JOURNEY_ID }, true);
    public static final ForeignKey<LocationRecord, LegRecord> LOCATION__LOCATION_LEG_ID_FKEY = Internal.createForeignKey(Location.LOCATION, DSL.name("location_leg_id_fkey"), new TableField[] { Location.LOCATION.LEG_ID }, Keys.LEG_PKEY, new TableField[] { Leg.LEG.LEG_ID }, true);
}
