/*
 * This file is generated by jOOQ.
 */
package uk.co.tyke.travellog.journey.data.postgres.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.tyke.travellog.journey.data.postgres.jooq.Keys;
import uk.co.tyke.travellog.journey.data.postgres.jooq.TravellogJourneyDevSchema;
import uk.co.tyke.travellog.journey.data.postgres.jooq.tables.records.LegRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Leg extends TableImpl<LegRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>travellog_journey_dev_schema.leg</code>
     */
    public static final Leg LEG = new Leg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LegRecord> getRecordType() {
        return LegRecord.class;
    }

    /**
     * The column <code>travellog_journey_dev_schema.leg.leg_id</code>.
     */
    public final TableField<LegRecord, Long> LEG_ID = createField(DSL.name("leg_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>travellog_journey_dev_schema.leg.journey_id</code>.
     */
    public final TableField<LegRecord, Long> JOURNEY_ID = createField(DSL.name("journey_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>travellog_journey_dev_schema.leg.distance</code>.
     */
    public final TableField<LegRecord, Integer> DISTANCE = createField(DSL.name("distance"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>travellog_journey_dev_schema.leg.created</code>.
     */
    public final TableField<LegRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Leg(Name alias, Table<LegRecord> aliased) {
        this(alias, aliased, null);
    }

    private Leg(Name alias, Table<LegRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>travellog_journey_dev_schema.leg</code> table
     * reference
     */
    public Leg(String alias) {
        this(DSL.name(alias), LEG);
    }

    /**
     * Create an aliased <code>travellog_journey_dev_schema.leg</code> table
     * reference
     */
    public Leg(Name alias) {
        this(alias, LEG);
    }

    /**
     * Create a <code>travellog_journey_dev_schema.leg</code> table reference
     */
    public Leg() {
        this(DSL.name("leg"), null);
    }

    public <O extends Record> Leg(Table<O> child, ForeignKey<O, LegRecord> key) {
        super(child, key, LEG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TravellogJourneyDevSchema.TRAVELLOG_JOURNEY_DEV_SCHEMA;
    }

    @Override
    public Identity<LegRecord, Long> getIdentity() {
        return (Identity<LegRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LegRecord> getPrimaryKey() {
        return Keys.LEG_PKEY;
    }

    @Override
    public List<ForeignKey<LegRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEG__LEG_JOURNEY_ID_FKEY);
    }

    private transient Journey _journey;

    /**
     * Get the implicit join path to the
     * <code>travellog_journey_dev_schema.journey</code> table.
     */
    public Journey journey() {
        if (_journey == null)
            _journey = new Journey(this, Keys.LEG__LEG_JOURNEY_ID_FKEY);

        return _journey;
    }

    @Override
    public Leg as(String alias) {
        return new Leg(DSL.name(alias), this);
    }

    @Override
    public Leg as(Name alias) {
        return new Leg(alias, this);
    }

    @Override
    public Leg as(Table<?> alias) {
        return new Leg(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Leg rename(String name) {
        return new Leg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Leg rename(Name name) {
        return new Leg(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Leg rename(Table<?> name) {
        return new Leg(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
